https://practice.geeksforgeeks.org/problems/most-occurring-elements-1587115620/1/?track=ppc-heap&batchId=221

int print_N_mostFrequentNumber(int arr[] , int n, int k) 
{ 
	unordered_map < int , int  > m ; 
	priority_queue < int , vector < int > , greater< int >> pq ; 
	for ( int i = 0 ; i < n ; i++ )
	m[arr[i]]++ ; 
	for ( auto it = m.begin() ; it != m.end() ; it++ )
	{
	    int freq = it -> second ; 
	    
	    pq.push ( freq ) ;
	    if ( pq.size() > k )
	    pq.pop() ; 
	}
	int sum = 0 ; 
	while ( pq.size() > 0 )
	{
	    
	    sum = sum + pq.top() ;
	    pq.pop() ;
	}
	return sum ; 
	
} 



OR



int print_N_mostFrequentNumber(int arr[] , int n, int k) 
{ 
	unordered_map < int , int  > m ; 
	priority_queue < pair < int , int > , vector < pair < int, int > > , greater< pair < int , int >> > pq ; 
	for ( int i = 0 ; i < n ; i++ )
	m[arr[i]]++ ; 
	for ( auto it = m.begin() ; it != m.end() ; it++ )
	{
	    int freq = it -> second ; 
	    int val = it -> first ; 
	    pq.push ( { freq , val } ) ;
	    if ( pq.size() > k )
	    pq.pop() ; 
	}
	int sum = 0 ; 
	while ( pq.size() > 0 )
	{
	    pair < int , int > p = pq.top() ; 
	    sum = sum + p.first ;
	    pq.pop() ;
	}
	return sum ; 
	
} 
